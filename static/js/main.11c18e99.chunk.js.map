{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","state","text","checked","date","Date","toISOString","slice","handleDate","e","_this","setState","target","value","handleText","handleChecked","handleClick","_this$state","length","props","add","alert","react_default","a","createElement","className","type","placeholder","this","onChange","id","htmlFor","onClick","Component","Task","_props$task","task","active","important","finishDate","style","color","change","delete","finish","toLocaleString","TaskList","tasks","filter","done","sort","b","addDate","activeTasks","map","components_Task","key","doneTasks","App","counter","deleteTask","console","log","Object","toConsumableArray","index","findIndex","splice","changeTaskStatus","Array","from","forEach","getTime","addTask","prevState","concat","components_AddTask","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.11c18e99.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass AddTask extends Component {\n  state = {\n    text: \"\",\n    checked: false,\n    date: new Date().toISOString().slice(0, 10)\n  };\n  handleDate = e => {\n    this.setState({\n      date: e.target.value\n    });\n  };\n  handleText = e => {\n    this.setState({\n      text: e.target.value\n    });\n  };\n  handleChecked = e => {\n    this.setState({\n      checked: e.target.checked\n    });\n  };\n  handleClick = () => {\n    const { checked, date, text } = this.state;\n    if (text.length > 3) {\n      const task = this.props.add(text, date, checked);\n      if (task) {\n        this.setState({\n          text: \"\",\n          checked: false,\n          date: new Date().toISOString().slice(0, 10)\n        });\n      }\n    } else {\n      alert(\"za krótki opis\");\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"form\">\n        <input\n          type=\"text\"\n          placeholder=\"dodaj zadanie\"\n          value={this.state.text}\n          onChange={this.handleText}\n        />\n        <input\n          type=\"checkbox\"\n          checked={this.state.checked}\n          onChange={this.handleChecked}\n          id=\"important\"\n        />\n        <label htmlFor=\"important\">Priorytet</label>\n        <br />\n        <label htmlFor=\"date\">Do kiedy</label>\n        <input type=\"date\" value={this.state.date} onChange={this.handleDate} />\n        <button onClick={this.handleClick}>Dodaj</button>\n        <hr />\n      </div>\n    );\n  }\n}\n\nexport default AddTask;\n","import React from \"react\";\n\nconst Task = props => {\n  const style = {\n    color: \"red\"\n  };\n\n  const { text, date, id, active, important, finishDate } = props.task;\n  if (active) {\n    return (\n      <div>\n        <p>\n          <strong style={important ? style : null}>{text} </strong>do {date}{\" \"}\n          <button onClick={() => props.change(id)}>zrobione</button>\n          <button onClick={() => props.delete(id)}>X</button>\n        </p>\n      </div>\n    );\n  } else {\n    const finish = new Date(finishDate).toLocaleString();\n    return (\n      <div>\n        {\" \"}\n        <p>\n          <strong>{text} </strong>\n          <em>(zrobić do {date})</em>\n          <br /> - potwierdzenie zrobienia {finish}\n          <button onClick={() => props.delete(id)}>X</button>\n        </p>\n      </div>\n    );\n  }\n};\nexport default Task;\n","import React from \"react\";\nimport Task from \"./Task\";\nconst TaskList = props => {\n  const active = props.tasks.filter(task => task.active);\n  const done = props.tasks.filter(task => !task.active);\n\n  done.sort((a, b) => b.finishDate - a.finishDate);\n  active.sort((a, b) => {\n    if (a.addDate < b.addDate) return 1;\n    if (a.addDate > b.addDate) return -1;\n    return 0;\n  });\n\n  const activeTasks = active.map(task => (\n    <Task\n      key={task.id}\n      task={task}\n      delete={props.delete}\n      change={props.change}\n    />\n  ));\n  const doneTasks = done.map(task => (\n    <Task\n      key={task.id}\n      task={task}\n      delete={props.delete}\n      change={props.change}\n    />\n  ));\n  return (\n    <div>\n      <div className=\"active\">\n        <h1>Zadania do zrobienia ({active.length})</h1>\n        {activeTasks.length > 0 ? activeTasks : \"brak zadań\"}\n      </div>\n      <div className=\"done\">\n        <h1>Zadania zrobione ({done.length})</h1>\n        {doneTasks.length > 0 ? doneTasks : \"brak zrobionych\"}\n      </div>\n    </div>\n  );\n};\nexport default TaskList;\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport AddTask from \"./AddTask\";\nimport TaskList from \"./TaskList\";\nclass App extends Component {\n  counter = 0;\n  state = {\n    tasks: []\n  };\n  deleteTask = id => {\n    console.log(id);\n    const tasks = [...this.state.tasks];\n    const index = tasks.findIndex(task => task.id === id);\n    tasks.splice(index, 1);\n    this.setState({\n      tasks\n    });\n  };\n  changeTaskStatus = id => {\n    let tasks = Array.from(this.state.tasks);\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime();\n      }\n    });\n    this.setState({\n      tasks\n    });\n  };\n  addTask = (text, date, important) => {\n    const task = {\n      id: this.counter,\n      text,\n      date,\n      important,\n      active: true,\n      finishDate: null,\n      addDate: new Date().toISOString().slice(0, 10)\n    };\n    this.counter++;\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task]\n    }));\n    return true;\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <AddTask add={this.addTask} />\n        <TaskList\n          tasks={this.state.tasks}\n          delete={this.deleteTask}\n          change={this.changeTaskStatus}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}